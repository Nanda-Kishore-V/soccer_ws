// Generated by gencpp from file image_processing/bot_state.msg
// DO NOT EDIT!


#ifndef IMAGE_PROCESSING_MESSAGE_BOT_STATE_H
#define IMAGE_PROCESSING_MESSAGE_BOT_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose2D.h>

namespace image_processing
{
template <class ContainerAllocator>
struct bot_state_
{
  typedef bot_state_<ContainerAllocator> Type;

  bot_state_()
    : num_circles(0)
    , pose()  {
    }
  bot_state_(const ContainerAllocator& _alloc)
    : num_circles(0)
    , pose(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _num_circles_type;
  _num_circles_type num_circles;

   typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _pose_type;
  _pose_type pose;




  typedef boost::shared_ptr< ::image_processing::bot_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::image_processing::bot_state_<ContainerAllocator> const> ConstPtr;

}; // struct bot_state_

typedef ::image_processing::bot_state_<std::allocator<void> > bot_state;

typedef boost::shared_ptr< ::image_processing::bot_state > bot_statePtr;
typedef boost::shared_ptr< ::image_processing::bot_state const> bot_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::image_processing::bot_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::image_processing::bot_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace image_processing

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'image_processing': ['/home/nanda/Documents/RMI/SoccerBots/codes/soccer_ws/src/image_processing/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::image_processing::bot_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::image_processing::bot_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::image_processing::bot_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::image_processing::bot_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::image_processing::bot_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::image_processing::bot_state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::image_processing::bot_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5b2e80437805ede8f38eb11e1d06bb53";
  }

  static const char* value(const ::image_processing::bot_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5b2e80437805ede8ULL;
  static const uint64_t static_value2 = 0xf38eb11e1d06bb53ULL;
};

template<class ContainerAllocator>
struct DataType< ::image_processing::bot_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "image_processing/bot_state";
  }

  static const char* value(const ::image_processing::bot_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::image_processing::bot_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 num_circles\n\
geometry_msgs/Pose2D pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
";
  }

  static const char* value(const ::image_processing::bot_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::image_processing::bot_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num_circles);
      stream.next(m.pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct bot_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::image_processing::bot_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::image_processing::bot_state_<ContainerAllocator>& v)
  {
    s << indent << "num_circles: ";
    Printer<int8_t>::stream(s, indent + "  ", v.num_circles);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMAGE_PROCESSING_MESSAGE_BOT_STATE_H
